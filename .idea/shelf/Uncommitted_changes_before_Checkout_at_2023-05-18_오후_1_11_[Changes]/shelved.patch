Index: src/main/resources/static/js/main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import * as THREE from 'three';\r\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\r\nimport { MapControls } from 'three/addons/controls/MapControls.js';\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\nimport { FontLoader } from 'three/addons/loaders/FontLoader.js';\r\n\r\n// basic javascripts\r\n\r\nconst exampleDatas = [];\r\nlet receivedData = [];\r\n\r\nfunction getBuildings() {\r\n  $.ajax( {\r\n\r\n    url : \"http://localhost:8090/buildings\",\r\n    type : \"GET\",\r\n    success : function ( res ) {\r\n\r\n      if ( res ) {\r\n        receivedData = res;\r\n        console.log( res );\r\n        console.log( receivedData );\r\n      } else {\r\n        alert( \"실패\" );\r\n      }\r\n\r\n    }\r\n\r\n  } );\r\n}\r\n// const receivedData = getBuildings();\r\n// getBuildings();\r\n\r\nconst HwaDo = {\r\n  id: '01',\r\n  building: '화도관',\r\n  building_phone_num: '',\r\n  management_team: '',\r\n  management_team_phone_num: '',\r\n  modelPath: './models/HwaDo.glb',\r\n  position: { x: -16, y: 0, z: -106 },\r\n  angle: -118,\r\n  scale: 1,\r\n  others: '',\r\n}\r\nconst BiMa = {\r\n  id: '03',\r\n  building: '비마관',\r\n  building_phone_num: '',\r\n  management_team: '',\r\n  management_team_phone_num: '',\r\n  modelPath: './models/BiMa.glb',\r\n  position: { x: 79, y: 0, z: -148 },\r\n  angle: 23,\r\n  scale: 1,\r\n  others: '',\r\n}\r\nconst SaeBit = {\r\n  id: '04',\r\n  building: '새빛관',\r\n  building_phone_num: '',\r\n  management_team: '',\r\n  management_team_phone_num: '',\r\n  modelPath: './models/SaeBit.glb',\r\n  position: { x: 55, y: 0, z: -229 },\r\n  angle: 74.5,\r\n  scale: 1,\r\n  others: '',\r\n}\r\nconst ChamBit = {\r\n  id: '09',\r\n  building: '참빛관',\r\n  building_phone_num: '',\r\n  management_team: '',\r\n  management_team_phone_num: '',\r\n  modelPath: './models/ChamBit.glb',\r\n  position: { x: 128, y: 0, z: -235 },\r\n  angle: -70,\r\n  scale: 1,\r\n  others: '',\r\n}\r\nconst KWSquare = {\r\n  id: '16',\r\n  building: '광운스퀘어&80주년기념관',\r\n  building_phone_num: '',\r\n  management_team: '',\r\n  management_team_phone_num: '',\r\n  modelPath: './models/KWSquare.glb',\r\n  position: { x: 42, y: 0, z: -70 },\r\n  angle: -119,\r\n  scale: 1,\r\n  others: '',\r\n}\r\nconst OkUi = {\r\n  id: '02',\r\n  building: '옥의관',\r\n  building_phone_num: '',\r\n  management_team: '',\r\n  management_team_phone_num: '',\r\n  modelPath: './models/OkUi.glb',\r\n  position: { x: 162, y: 0, z: -72 },\r\n  angle: 212,\r\n  scale: 1,\r\n  others: '',\r\n}\r\n\r\nexampleDatas.push( HwaDo );\r\nexampleDatas.push( BiMa );\r\nexampleDatas.push( SaeBit );\r\nexampleDatas.push( ChamBit );\r\nexampleDatas.push( KWSquare );\r\nexampleDatas.push( OkUi );\r\n\r\nconst fixedHelp = document.getElementById( 'fixedHelp' );\r\nfixedHelp.addEventListener( 'click', () => {\r\n\r\n  if ( fixedHelp.classList.contains( 'active' ) ) {\r\n\r\n    fixedHelp.classList.remove( 'active' );\r\n    fixedHelp.removeAttribute( 'style' );\r\n    return;\r\n\r\n  }\r\n\r\n  fixedHelp.classList.add( 'active' );\r\n  fixedHelp.style.height = fixedHelp.querySelector( 'ul' ).clientHeight + 40 + 'px';\r\n\r\n} );\r\n\r\n///////////////////////////////\r\n///// THREE.js from here: /////\r\n///////////////////////////////\r\n\r\nlet width, height, camera, controls, scene, renderer, raycaster, gui;\r\n\r\nconst pointer = new THREE.Vector2(); // mouse cursor position tracking\r\nlet intersects = []; // list to find which building is selected\r\nlet INTERSECTED = undefined; // stores which building is selected\r\n\r\nconst buildings = [];\r\nconst fonts = [];\r\n// const arrows = [];\r\n\r\ninit();\r\nanimate();\r\n\r\nfunction init() {\r\n\r\n  // variables\r\n\r\n  width = window.innerWidth;\r\n  height = window.innerHeight;\r\n\r\n  scene = new THREE.Scene();\r\n  scene.background = new THREE.Color( 0xcccccc );\r\n  scene.fog = new THREE.FogExp2( 0xcccccc, 0.003 );\r\n\r\n  raycaster = new THREE.Raycaster(); // for mouse(pointer) tracking\r\n\r\n  renderer = new THREE.WebGLRenderer( { antialias: true } );\r\n  renderer.setPixelRatio( window.devicePixelRatio );\r\n  renderer.setSize( width, height );\r\n  document.querySelector( 'main' ).appendChild( renderer.domElement ); // where to append\r\n\r\n  camera = new THREE.PerspectiveCamera( 60, width / height, 1, 700 );// 1000 );\r\n  camera.position.set( 200, 100, 0 ); // ( 400, 200, 0 );\r\n\r\n  // controls\r\n\r\n  controls = new MapControls( camera, renderer.domElement );\r\n\r\n  //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\r\n\r\n  controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\r\n  controls.dampingFactor = 0.05;\r\n\r\n  controls.screenSpacePanning = false;\r\n\r\n  controls.minDistance = 100;\r\n  controls.maxDistance = 500;\r\n\r\n  controls.maxPolarAngle = Math.PI / 2;\r\n\r\n  // GLTF Loader, load models\r\n\r\n  const gltfLoader = new GLTFLoader();\r\n  // Fetch Server here\r\n\r\n  exampleDatas.forEach( ( data ) => {\r\n    createModel( gltfLoader, data );\r\n  } );\r\n\r\n  // world floor\r\n\r\n  const planeSize = 1000; // 2000;\r\n  const planeTexture = new THREE.TextureLoader().load( './images/KakaoMap_KWU.png' );\r\n  const worldFloor = new THREE.Mesh(\r\n    new THREE.PlaneGeometry( planeSize, planeSize, 8, 8 ),\r\n    new THREE.MeshBasicMaterial( { side: THREE.FrontSide, map: planeTexture } )\r\n  );\r\n  worldFloor.rotateX( Math.PI / ( -2 ) );\r\n  worldFloor.rotateZ( Math.PI / 2 );\r\n  worldFloor.name = 'worldFloor';\r\n  scene.add( worldFloor );\r\n\r\n  // lights\r\n\r\n  const dirLight1 = new THREE.DirectionalLight( 0xffffff );\r\n  dirLight1.position.set( 10, 12, 9 );\r\n  dirLight1.name = 'dirLight1';\r\n  scene.add( dirLight1 );\r\n\r\n  const dirLight2 = new THREE.DirectionalLight( 0x002266 );\r\n  dirLight2.position.set( -9, -12, -10 );\r\n  dirLight2.name = 'dirLight2';\r\n  scene.add( dirLight2 );\r\n\r\n  const ambientLight = new THREE.AmbientLight( 0x222222 );\r\n  ambientLight.name = 'ambientLight';\r\n  scene.add( ambientLight );\r\n\r\n  // Create GUI Pannel\r\n\r\n  gui = new GUI( { container: document.getElementById( 'guiContainer' ), title: 'Information' } );\r\n  let obj = {\r\n    building: '',\r\n    building_phone_num: '',\r\n    management_team: '',\r\n    management_team_phone_num: '',\r\n    myFunction: function() { alert( 'hi' ) }, // onclick callback\r\n  }\r\n\r\n  gui.add( obj, 'building' ).name( '건물명' ); \t// text field\r\n  gui.add( obj, 'building_phone_num' ).name( '전화번호' ); \t// number field\r\n  gui.add( obj, 'management_team' ).name( '시설관리팀' );\r\n  gui.add( obj, 'management_team_phone_num' ).name( '시설관리팀 전화번호' );\r\n  gui.add( obj, 'myFunction' ).name( '세부정보' ); \t// button\r\n  gui.controllers[1].$input.readOnly = true;\r\n  gui.controllers[2].$input.readOnly = true;\r\n\r\n  window.addEventListener( 'resize', onWindowResize );\r\n  window.addEventListener( 'pointermove', onPointerMove );\r\n  window.addEventListener( 'click', onClick );\r\n  // window.addEventListener( 'dblclick', ( event ) => { // dev, 더블 클릭시 카메라의 위치에서 카메라 방향으로 \r\n  //   console.log( event );\r\n  //   const arrow = new THREE.ArrowHelper( camera.getWorldDirection( new THREE.Vector3 ), camera.getWorldPosition( new THREE.Vector3 ), 15, 0xff0000 );\r\n  //   scene.add( arrow );\r\n  //   arrows.push( arrow );\r\n  // } );\r\n\r\n}\r\n\r\n// window events\r\n\r\nfunction onWindowResize() {\r\n  \r\n  camera.aspect = width / height;\r\n  camera.updateProjectionMatrix();\r\n  renderer.setSize( width, height );\r\n  \r\n}\r\n\r\nfunction onPointerMove( event ) {\r\n\r\n  pointer.set( ( event.clientX / width ) * 2 - 1, - ( event.clientY / height ) * 2 + 1 );\r\n  getIntersects();\r\n\r\n}\r\n\r\nfunction onClick( event ) {\r\n\r\n  onPointerMove(event); // get pointer position\r\n  if ( INTERSECTED ) {\r\n\r\n    INTERSECTED.userData.onClick();\r\n\r\n  }\r\n\r\n}\r\n\r\n// three.js required\r\n\r\nfunction animate() {\r\n\r\n  window.requestAnimationFrame( animate );\r\n\r\n  // Let the groups generated from `createFont()` to face the camera all the time\r\n  fonts.forEach( ( font ) => {\r\n\r\n    font.quaternion.copy( camera.quaternion );\r\n\r\n  });\r\n  controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\r\n  render();\r\n\r\n}\r\n\r\nfunction render() {\r\n\r\n  renderer.render( scene, camera );\r\n\r\n}\r\n\r\n// custom functions\r\n\r\n/**\r\n * 건물의 모델링을 불러와 `scene`에 추가합니다.\r\n * \r\n * `loader` 를 사용해 `building.modelPath` 에 있는 모델을 불러옵니다.   \r\n * 모델의 위치, 회전시킬 각도, 크기 조정을 위한 스케일을 설정하여 `scene` 및 `buildings` 리스트에 추가하고, `createFont()` 에 `position` 을 전달합니다.\r\n * @param { GLTFLoader } loader `GLTFLoader` used in this file.\r\n * @param { object } building Item stored in `receivedData` list, an object containing informations of each buildings.\r\n */\r\nfunction createModel ( loader, data ) {\r\n\r\n  if ( data.modelPath === '' ) { console.error( 'modelPath not found' ); }\r\n  loader.load( data.modelPath, async ( gltf ) => {\r\n\r\n    const model = await gltf.scene;\r\n    if ( !model ) {\r\n      // error handling\r\n    }\r\n    model.name = data.building;\r\n    model.position.set( data.position.x, data.position.y, data.position.z );\r\n    model.rotateY( Math.PI / 180 * data.angle );\r\n    model.scale.setScalar( data.scale );\r\n\r\n    model.userData = {\r\n      // isActive: false, // not used\r\n      id: data.id,\r\n      building_phone_num: data.building_phone_num,\r\n      management_team: data.management_team,\r\n      management_team_phone_num: data.management_team_phone_num,\r\n      viewPosition: data.viewPosition,\r\n      others: data.others,\r\n      \r\n      // add events to this model via userData\r\n      onPointerOver: function() {\r\n        for ( let child of model.children ) {\r\n\r\n          child.currentHex = child.material.emissive.getHex();\r\n          child.material.emissive.setHex( 0xff0000 );\r\n    \r\n        }\r\n      },\r\n\r\n      onPointerOut: function() {\r\n        for ( let child of model.children ) {\r\n\r\n          child.material.emissive.setHex( 0 );\r\n\r\n        }\r\n      },\r\n\r\n      onClick: function() {\r\n\r\n        console.log( model.name + ' clicked!' );\r\n        gui.open();\r\n        gui.controllers[ 0 ].setValue( model.name );\r\n        gui.controllers[ 1 ].setValue( model.userData.building_phone_num );\r\n        gui.controllers[ 2 ].setValue( model.userData.management_team );\r\n        gui.controllers[ 3 ].setValue( model.userData.management_team_phone_num );\r\n        gui.controllers[ 4 ].setValue( model.userData.id );\r\n\r\n      }\r\n    }\r\n    \r\n    createFont( model.position, model.name );\r\n    buildings.push( model );\r\n    scene.add( model );\r\n\r\n  }, ( progress ) => {\r\n\r\n    // console.log( progress.loaded / progress.total * 100 + \"% loaded!\" );\r\n\r\n  }, ( error ) => {\r\n\r\n    console.error( error );\r\n\r\n  } );\r\n\r\n}\r\n\r\n/**\r\n * 건물 이름 표시를 위한 3D 폰트 생성 함수입니다.   \r\n * `position` 에 해당하는 위치에서 `THREE.Line` 과 `THREE.Mesh (text)` 을 갖는 `THREE.Group` 을 생성합니다.\r\n * @param { THREE.Vector3 } position position of the target model\r\n * @param { string } name name of the target building\r\n */\r\nasync function createFont( position, name ) {\r\n  // Drawing Lines:\r\n  const points = [];\r\n  points.push( new THREE.Vector3( 0, 0, 0 ) );\r\n  points.push( new THREE.Vector3( 25, 25, 25 ) ); // ( 50, 50, 50 ) );\r\n\r\n  const line = new THREE.Line(\r\n    new THREE.BufferGeometry().setFromPoints( points ),\r\n    new THREE.LineBasicMaterial( { color: 0x000000, linewidth: 5 } )\r\n  );\r\n  line.position.set( 0, 0, 0 );\r\n  line.material.depthTest = false; // for renderOrder\r\n\r\n  // font loading function\r\n  const loader = new FontLoader();\r\n  await loader.load( './fonts/NanumSquareRound.json', function ( font ) {\r\n\r\n    const material = new THREE.MeshBasicMaterial( {\r\n      color: 0x000000,\r\n      transparent: false,\r\n      side: THREE.FrontSide,\r\n    } );\r\n\r\n    const message = name;\r\n    const shapes = font.generateShapes( message, 5 ); // 10 );\r\n    const geometry = new THREE.ShapeGeometry( shapes );\r\n\r\n    // make shape ( N.B. edge view not visible )\r\n    const text = new THREE.Mesh( geometry, material );\r\n    text.position.set( 25, 25, 25 );// ( 50, 50, 50 );\r\n    text.material.depthTest = false; // for renderOrder\r\n    group.add( text );\r\n\r\n  } ); //end load function\r\n\r\n  // Create Group:\r\n  const group = new THREE.Group();\r\n  group.add( line );\r\n  // group.add( plane );\r\n  group.position.copy( position );\r\n  fonts.push( group );\r\n  group.renderOrder = 1; // renderOrder (z-index)\r\n  group.name = name + ' Font';\r\n  scene.add( group );\r\n\r\n}\r\n\r\n/**\r\n * `pointer` 에서 `camera` 가 바라보는 방향으로 `raycaster` 를 생성해 교차하는 아이템을 가져옵니다.   \r\n * \r\n * `buildings` 목록에서 `raycaster` 와 교차하는 아이템을 확인하여 가장 앞에 있는 것을 `INTERSECTED`로 설정한 후 `onPointerOver()` 를 수행합니다.   \r\n * 교차하는 아이템이 바뀌거나 사라졌을 때는 기존 아이템의 `onPointerOut()`를 수행합니다.\r\n */\r\nfunction getIntersects() {\r\n\r\n  raycaster.setFromCamera( pointer, camera );\r\n  intersects = raycaster.intersectObjects( buildings, true );\r\n  if ( intersects.length > 0 ) { \r\n    \r\n    if ( INTERSECTED ) INTERSECTED.userData.onPointerOut();\r\n    INTERSECTED = intersects[ 0 ].object.parent;\r\n    INTERSECTED.userData.onPointerOver();\r\n  \r\n  } else { \r\n    \r\n    if ( INTERSECTED ) INTERSECTED.userData.onPointerOut();\r\n    INTERSECTED = undefined;\r\n  \r\n  }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/static/js/main.js b/src/main/resources/static/js/main.js
--- a/src/main/resources/static/js/main.js	(revision 2ef29b3be64fb162ef685d381de829fa31f36604)
+++ b/src/main/resources/static/js/main.js	(date 1684383077124)
@@ -43,6 +43,18 @@
   scale: 1,
   others: '',
 }
+const OkUi = {
+  id: '02',
+  building: '옥의관',
+  building_phone_num: '',
+  management_team: '',
+  management_team_phone_num: '',
+  modelPath: './models/OkUi.glb',
+  position: { x: 162, y: 0, z: -72 },
+  angle: 212,
+  scale: 1,
+  others: '',
+}
 const BiMa = {
   id: '03',
   building: '비마관',
@@ -66,6 +78,30 @@
   angle: 74.5,
   scale: 1,
   others: '',
+}
+const BokJi = {
+  id: '05',
+  building: '복지관',
+  building_phone_num: '',
+  management_team: '',
+  management_team_phone_num: '',
+  modelPath: './models/BokJi.glb',
+  position: { x: 120, y: 0, z: 5 },
+  angle: -28,
+  scale: 1,
+  others: '',
+}
+const DaSan = {
+  id: '07',
+  building: '다산재',
+  building_phone_num: '',
+  management_team: '',
+  management_team_phone_num: '',
+  modelPath: './models/DaSan.glb',
+  position: { x: 131, y: 0, z: -156 },
+  angle: 42,
+  scale: 1,
+  others: '',
 }
 const ChamBit = {
   id: '09',
@@ -91,18 +127,6 @@
   scale: 1,
   others: '',
 }
-const OkUi = {
-  id: '02',
-  building: '옥의관',
-  building_phone_num: '',
-  management_team: '',
-  management_team_phone_num: '',
-  modelPath: './models/OkUi.glb',
-  position: { x: 162, y: 0, z: -72 },
-  angle: 212,
-  scale: 1,
-  others: '',
-}
 
 exampleDatas.push( HwaDo );
 exampleDatas.push( BiMa );
